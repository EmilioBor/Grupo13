// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Data.Models;

public partial class Grupo13Context : DbContext
{
    public Grupo13Context(DbContextOptions<Grupo13Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Contrato> Contrato { get; set; }

    public virtual DbSet<Equipo> Equipo { get; set; }

    public virtual DbSet<Pais> Pais { get; set; }

    public virtual DbSet<Persona> Persona { get; set; }

    public virtual DbSet<Prueba> Prueba { get; set; }

    public virtual DbSet<PruebaEquipo> PruebaEquipo { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Contrato>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Contrato_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.FechaFin).HasColumnName("fechaFin");
            entity.Property(e => e.FechaInicio).HasColumnName("fechaInicio");
            entity.Property(e => e.IdEquipo).HasColumnName("idEquipo");
            entity.Property(e => e.IdPersona).HasColumnName("idPersona");

            entity.HasOne(d => d.IdEquipoNavigation).WithMany(p => p.Contrato)
                .HasForeignKey(d => d.IdEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idEquipo");

            entity.HasOne(d => d.IdPersonaNavigation).WithMany(p => p.Contrato)
                .HasForeignKey(d => d.IdPersona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idPersona");
        });

        modelBuilder.Entity<Equipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Equipo_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.IdPais).HasColumnName("idPais");
            entity.Property(e => e.IdPersona).HasColumnName("idPersona");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Equipo)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idPais");

            entity.HasOne(d => d.IdPersonaNavigation).WithMany(p => p.Equipo)
                .HasForeignKey(d => d.IdPersona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idPersona");
        });

        modelBuilder.Entity<Pais>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Pais_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Persona>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Persona_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasColumnName("apellido");
            entity.Property(e => e.Dni).HasColumnName("dni");
            entity.Property(e => e.FechaNacimiento).HasColumnName("fechaNacimiento");
            entity.Property(e => e.IdPais).HasColumnName("idPais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
            entity.Property(e => e.Rol).HasColumnName("rol");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Persona)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Persona_idPais_fkey");
        });

        modelBuilder.Entity<Prueba>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Prueba_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.AñoEdicion).HasColumnName("añoEdicion");
            entity.Property(e => e.CantEtapas).HasColumnName("cantEtapas");
            entity.Property(e => e.IdPersona).HasColumnName("idPersona");
            entity.Property(e => e.KmTotales).HasColumnName("kmTotales");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPersonaNavigation).WithMany(p => p.Prueba)
                .HasForeignKey(d => d.IdPersona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idPersona");
        });

        modelBuilder.Entity<PruebaEquipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PruebaEquipo_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.IdEquipo).HasColumnName("idEquipo");
            entity.Property(e => e.IdPrueba).HasColumnName("idPrueba");
            entity.Property(e => e.Posicion).HasColumnName("posicion");

            entity.HasOne(d => d.IdEquipoNavigation).WithMany(p => p.PruebaEquipo)
                .HasForeignKey(d => d.IdEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idEquipo");

            entity.HasOne(d => d.IdPruebaNavigation).WithMany(p => p.PruebaEquipo)
                .HasForeignKey(d => d.IdPrueba)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idPrueba");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}